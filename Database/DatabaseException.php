<?php
/**
 * Copyright (c) 2008-2009, Fabian "smf68" Hahn <smf68@smf68.ch>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace PhpFramework\Database;

use \PhpFramework\PhpFramework as PF;

/**
 * Class that represents any error generated by the Database class
 *
 */
class DatabaseException extends \Exception
{
	/**
	 * Should the exception be printed as html?
	 * 
	 * @var boolean
	 */
	protected static $html_output = false;
	
	/**
	 * Stores the backtrace of this exception
	 *
	 * @var string
	 */
	protected $backtrace = "";
	/**
	 * Stores the query that caused the exception
	 *
	 * @var string
	 */
	protected $query = "";
	
	/**
	 * Constructs an exception
	 *
	 * @param string $message
	 * @param integer $errno
	 * @param string $query
	 * @param array $preTrace		A previously created backtrace
	 */
	public function __construct($message = null, $errno = 0, $query = "", $pretrace = null)
	{
		$this->backtrace = $pretrace;
		$this->query = $query;
		
		parent::__construct($message, $errno);
	}
	
	/**
	 * Converts the exception into a string
	 *
	 * @return string string representation of the exception
	 */
	public function __toString()
	{
		if(self::$html_output)
		{
			$result = "<b>Database Exception:</b> " . $this->getMessage() . "<br>\n";
			$result .= "<b>Error number:</b> " . $this->getCode() . "<br>\n";
			$result .= "<b>Query:</b> " . $this->query . "<br>\n";
			$result .= "<b>Backtrace:</b><br><pre>" . print_r($this->getBacktrace(), true) . "</pre><br><br>\n\n";
		}
		else
		{
			$result = "Database Exception: " . $this->getMessage() . "\n";
			$result .= "Error number: " . $this->getCode() . "\n";
			$result .= "Query: " . $this->query . "\n";
			$result .= "Backtrace: " . print_r($this->getBacktrace(), true) . "\n\n";
		}
		
		return $result;
	}
	
	/**
	 * Enables HTML exception output
	 */
	public static function enableHtmlOutput()
	{
		self::$html_output = true;
	}
	
	/**
	 * Disables HTML exception output
	 */	
	public static function disableHtmlOutput()
	{
		self::$html_output = false;
	}

	/**
	 * Returns this exception's backtrace
	 *
	 * @return array backtrace
	 */
	public function getBacktrace()
	{
		if($this->backtrace)
		{
			return $this->backtrace;
		}
		else
		{
			return $this->getTrace();
		}
	}
	
	/**
	 * Returns this exception's query
	 *
	 * @return string query
	 */
	public function getQuery()
	{
		return $this->query;
	}
}
?>